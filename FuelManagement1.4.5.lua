{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--Configuration for this script can be found in the start() function in the menu to your left\n--Edit code in this section at your own risk\n\nfunction getSpaceSVG()\n    spaceFuelPercents = {}\n    local returnSVG=[[]]\n    for i=1,#spaceTanks,1 do\n        spaceFuelPercents[i] = 1890*((json.decode(spaceTanks[i].getData()).percentage)/100)\n        returnSVG = returnSVG..[[<text x=\"15\" y=\"]]..120+(numBars * barAndTextHeight)..[[\" font-size=\"40\" text-anchor=\"start\" fill=\"]]..spaceNameColor..[[\">]]..spaceTankNames[i]..[[</text>\n\t\t                     <rect x=\"15\" y=\"]]..135+(numBars * barAndTextHeight)..[[\" width=\"1890\" height=\"]]..(barAndTextHeight-60)..[[\" fill=\"]]..backgroundColor..[[\" stroke=\"]]..borderColor..[[\" stroke-width=\"5\"/>\n\t\t                     <rect x=\"15\" y=\"]]..135+(numBars * barAndTextHeight)..[[\" width=\"]]..spaceFuelPercents[i]..[[\" height=\"]]..(barAndTextHeight-60)..[[\" fill=\"]]..spaceBarColor..[[\" stroke-width=\"0\"/>]]\n        numBars = numBars+1\n    end\n    return returnSVG\nend\n\nfunction getAtmoSVG()\n    local atmoFuelPercents = {}\n    local returnSVG=[[]]\n    for i=1,#atmoTanks,1 do\n        atmoFuelPercents[i] = 1890*((json.decode(atmoTanks[i].getData()).percentage)/100)\n        returnSVG = returnSVG..[[<text x=\"15\" y=\"]]..120+(numBars * barAndTextHeight)..[[\" font-size=\"40\" text-anchor=\"start\" fill=\"]]..atmoTextColor..[[\">]]..atmoTankNames[i]..[[</text>\n\t\t\t\t\t        <rect x=\"15\" y=\"]]..135+(numBars * barAndTextHeight)..[[\" width=\"1890\" height=\"]]..(barAndTextHeight-60)..[[\" fill=\"]]..backgroundColor..[[\" stroke=\"]]..borderColor..[[\" stroke-width=\"5\"/>\n\t\t\t\t\t        <rect x=\"15\" y=\"]]..135+(numBars * barAndTextHeight)..[[\" width=\"]]..atmoFuelPercents[i]..[[\" height=\"]]..(barAndTextHeight-60)..[[\" fill=\"]]..atmoBarColor..[[\" stroke-width=\"0\"/>]]\n        numBars = numBars+1\n    end\n    return returnSVG\nend\n\nfunction getRocketSVG()\n    local returnSVG = [[]]\n    local rocketFuelPercents = {}\n    for i=1,#rocketTanks,1 do\n        rocketFuelPercents[i] = 1890*((json.decode(rocketTanks[i].getData()).percentage)/100)\n        returnSVG = returnSVG..[[<text x=\"15\" y=\"]]..120+(numBars * barAndTextHeight)..[[\" font-size=\"40\" text-anchor=\"start\" fill=\"]]..rocketTextColor..[[\">]]..rocketTankNames[i]..[[</text>\n\t\t\t\t\t        <rect x=\"15\" y=\"]]..135+(numBars * barAndTextHeight)..[[\" width=\"1890\" height=\"]]..(barAndTextHeight-60)..[[\" fill=\"]]..backgroundColor..[[\" stroke=\"]]..borderColor..[[\" stroke-width=\"5\"/>\n\t\t\t\t\t        <rect x=\"15\" y=\"]]..135+(numBars * barAndTextHeight)..[[\" width=\"]]..rocketFuelPercents[i]..[[\" height=\"]]..(barAndTextHeight-60)..[[\" fill=\"]]..rocketBarColor..[[\" stroke-width=\"0\"/>]]\n        numBars = numBars+1\n    end\n    return returnSVG\nend\n\nfunction getBarSVG()\n\t--1 - Space,Atmo,Rocket\n\t--2 - Space,Rocket,Atmo\n\t--3 - Atmo,Space,Rocket\n\t--4 - Atmo,Rocket,Space\n\t--5 - Rocket,Space,Atmo\n\t--6 - Rocket,Atmo,Space\n    if tankOrder == 2 then\n        return getSpaceSVG()..getRocketSVG()..getAtmoSVG()\n    elseif tankOrder == 3 then\n        return getAtmoSVG()..getSpaceSVG()..getRocketSVG()\n    elseif tankOrder == 4 then\n        return getAtmoSVG()..getRocketSVG()..getSpaceSVG()\n    elseif tankOrder == 5 then\n        return getRocketSVG()..getSpaceSVG()..getAtmoSVG()\n    elseif tankOrder == 6 then\n        return getRocketSVG()..getAtmoSVG()..getSpaceSVG()\n    else\n        return getSpaceSVG()..getAtmoSVG()..getRocketSVG()\n    end\nend\n    \nfunction update()\n    if playerToggle then\n        playerDistance = vec3(unit.getMasterPlayerRelativePosition()):len()\n    else\n        playerDistance = 0\n    end\n    \n    if(playerDistance < 200) then\n        barAndTextHeight = (1120-120)/(#spaceTanks + #atmoTanks + #rocketTanks)\n        numBars=0\n        bars = getBarSVG()\n\n        svg = [[<svg class=\"bootstrap\" viewBox=\"0 0 1920 1120\" style=\"width:100%; height:100%\"><svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\">\n  \n\t           <rect width=\"100%\" height=\"100%\" fill=\"]]..backgroundColor..[[\" />\n\n \t           <text x=\"15\" y=\"55\" font-size=\"60\" text-anchor='start' fill=\"]]..headerColor..[[\">]]..windowName..[[</text>\n    \n \t           <line x1=\"0\" x2=\"1920\" y1=\"75\" y2=\"75\" stroke=\"]]..borderColor..[[\", fill=\"]]..borderColor..[[\"/>\n\t\n                ]]..bars..[[\n\n\t           </svg></svg>]]\n\n\t   for i=1,#screens,1 do\n     \t   screens[i].setSVG(svg)\n\t   end\n    end\nend\n\nupdate()\n\n\n\n\n","filter":{"args":[{"value":"updateFuelDisplay"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"0"},{"code":"--Script Information----------------------------------------------------------------------------------------------------------------------\n--Version: 1.4.5\n--Created by: Rost\n--For Support:\n     --Discord: Rost#6764\n     --Ingame: RostNerd\n--GitHub: https://github.com/RostCS/DU-FuelScreen\n\n--Script Configuration--------------------------------------------------------------------------------------------------------------------\n\n--Debug Mode(prints extra values to help with troubleshooting)\ndebug = false\n\n--Tank Type Order\n--1 - Space,Atmo,Rocket\n--2 - Space,Rocket,Atmo\n--3 - Atmo,Space,Rocket\n--4 - Atmo,Rocket,Space\n--5 - Rocket,Space,Atmo\n--6 - Rocket,Atmo,Space\ntankOrder = 1\n\n--Player Distance controlled updates\n--If the player that activated the script walks out of range of the programming board, the script will disable\n--If you are using a detection zone to control the PB, this setting should be disabled\nplayerToggle = true --export: Disable if using a detection zone\n\n--Hides the widget in the bottom right\nhideWidget = true\n\n--Update Speed(rate at which the screen updates in seconds\nupdateSpeed = 1 \n\n--Header Text\nwindowName = \"Fuel Management\" \n\nspaceTankNames = {}\n--Name of Space Tank 1\nspaceTankNames[1] = \"Space Tank 1\" \n\n--Name of Space Tank 2\nspaceTankNames[2] = \"Space Tank 2\" \n\n--Name of Space Tank 3\nspaceTankNames[3] = \"Space Tank 3\" \n\n--Name of Space Tank 4\nspaceTankNames[4] = \"Space Tank 4\" \n\n--Name of Space Tank 5\nspaceTankNames[5] = \"Space Tank 5\" \n\n--Name of Space Tank 6\nspaceTankNames[6] = \"Space Tank 6\" \n\n--Name of Space Tank 7\nspaceTankNames[7] = \"Space Tank 7\" \n\n--Name of Space Tank 8\nspaceTankNames[8] = \"Space Tank 8\" \n\natmoTankNames = {}\n--Name of Atmo Tank 1\natmoTankNames[1] = \"Atmospheric Tank 1\" \n\n--Name of Atmo Tank 2\natmoTankNames[2] = \"Atmospheric Tank 2\" \n\n--Name of Atmo Tank 3\natmoTankNames[3] = \"Atmospheric Tank 3\" \n\n--Name of Atmo Tank 4\natmoTankNames[4] = \"Atmospheric Tank 4\" \n\n--Name of Atmo Tank 5\natmoTankNames[5] = \"Atmospheric Tank 5\" \n\n--Name of Atmo Tank 6\natmoTankNames[6] = \"Atmospheric Tank 6\" \n\n--Name of Atmo Tank 7\natmoTankNames[7] = \"Atmospheric Tank 7\" \n\n--Name of Atmo Tank 8\natmoTankNames[8] = \"Atmospheric Tank 8\" \n\nrocketTankNames = {}\n--Name of Rocket Tank 1\nrocketTankNames[1] = \"Rocket Tank 1\" \n\n--Name of Rocket Tank 2\nrocketTankNames[2] = \"Rocket Tank 2\" \n\n--Name of Rocket Tank 3\nrocketTankNames[3] = \"Rocket Tank 3\" \n\n--Name of Rocket Tank 4\nrocketTankNames[4] = \"Rocket Tank 4\" \n\n--Name of Rocket Tank 5\nrocketTankNames[5] = \"Rocket Tank 5\" \n\n--Name of Rocket Tank 6\nrocketTankNames[6] = \"Rocket Tank 6\" \n\n--Name of Rocket Tank 7\nrocketTankNames[7] = \"Rocket Tank 7\" \n\n--Name of Rocket Tank 8\nrocketTankNames[8] = \"Rocket Tank 8\" \n\n--Background Color\nbackgroundColor = \"#2f343d\" \n\n--Bar Border Color\nborderColor = \"white\" \n\n--Header Text Color\nheaderColor = \"white\" \n\n--Space Text Color\nspaceNameColor = \"orange\" \n\n--Space Bar Color\nspaceBarColor = \"orange\" \n\n--Atmo Text Color\natmoTextColor = \"#34b1eb\" \n\n--Atmo Bar Color\natmoBarColor = \"#34b1eb\" \n\n--Rocket Text Color\nrocketTextColor = \"#6e3de3\"\n\n--Rocket Bar Color\nrocketBarColor = \"#6e3de3\" \n\n--Script Configuration Done--Modifications beyond here are at your own risk--\n------------------------------------------------------------------------------------------------------------------    \nfunction insertionSort(array)-- Basic insertion sort algorithm used to sort the spaceTanks and atmoTanks arrays\n    local len = #array\n    local j\n    for j = 2, len do\n        local key = array[j]\n        local i = j - 1 --The line below sorts the array using the name field of the tank for consistent results\n        while i > 0 and json.decode(array[i].getData()).name > json.decode(key.getData()).name do\n            array[i + 1] = array[i]\n            i = i - 1\n        end\n        array[i + 1] = key\n    end\n    return array\nend\n\natmoTanks = {} -- This array contains a list of all the atmospheric tanks with a link to the PB\n\nfor key, value in pairs(unit) do\n  if type(value) == \"table\" and type(value.export) == \"table\" then -- `value` is an element and `key` is the slot name\n    if value.getElementClass then --if it has a class\n      if value.getElementClass() == \"AtmoFuelContainer\" then --if it's an atmo tank\n          atmoTanks[#atmoTanks + 1] = value\n      end\n    end\n  end\nend \n\n\natmoTanks = insertionSort(atmoTanks)\n--We're required to sort the atmoTanks array, as the code that gets it is not consistent, and\n--due to some unknown value, the order of the tanks is randomized.\n--by sorting the array by the name of the tank, we can verify a consistent order every time\n\nspaceTanks = {} -- This array contains a list of all the space tanks with a link to the PB\n\nfor key, value in pairs(unit) do\n  if type(value) == \"table\" and type(value.export) == \"table\" then -- `value` is an element and `key` is the slot name\n    if value.getElementClass then --if it has a class\n      if value.getElementClass() == \"SpaceFuelContainer\" then --if it's a space tank\n           spaceTanks[#spaceTanks + 1] = value \n      end\n    end\n  end\nend \n\nspaceTanks = insertionSort(spaceTanks)\n--We're required to sort the spaceTanks array, as the code that gets it is not consistent, and\n--due to some unknown value, the order of the tanks is randomized.\n--by sorting the array by the name of the tank, we can verify a consistent order every time\n\nrocketTanks = {} -- This array contains a list of all the rocket tanks with a link to the PB\n\nfor key, value in pairs(unit) do\n  if type(value) == \"table\" and type(value.export) == \"table\" then -- `value` is an element and `key` is the slot name\n    if value.getElementClass then --if it has a class\n      if value.getElementClass() == \"RocketFuelContainer\" then --if it's a rocket tank\n           rocketTanks[#rocketTanks + 1] = value \n      end\n    end\n  end\nend \n\nrocketTanks = insertionSort(rocketTanks)\n--We're required to sort the rocketTanks array, as the code that gets it is not consistent, and\n--due to some unknown value, the order of the tanks is randomized.\n--by sorting the array by the name of the tank, we can verify a consistent order every time\n\nscreens = {}\n\nfor key, value in pairs(unit) do\n  if type(value) == \"table\" and type(value.export) == \"table\" then -- `value` is an element and `key` is the slot name\n    if value.getElementClass then -- if it has a class\n      if value.getElementClass() == \"ScreenUnit\" then --if it's a screen\n           screens[#screens + 1] = value\n      end\n    end\n  end\nend \n\nif debug then\n    system.print('Number of Screens: '..#screens)\n    system.print('Number of Space Tanks: '..#spaceTanks)\n    system.print('Number of Atmospheric Tanks: '..#atmoTanks)\n    system.print('Number of Rocket Tanks: '..#rocketTanks)\nend\n\nif hideWidget then\n    unit.hide()\nelse\n    unit.show()\nend\n\n\nunit.setTimer('updateFuelDisplay',updateSpeed)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"1"}],"methods":[],"events":[]}